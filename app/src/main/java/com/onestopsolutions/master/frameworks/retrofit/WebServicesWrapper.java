package com.onestopsolutions.master.frameworks.retrofit;import com.google.gson.Gson;import com.google.gson.internal.LinkedTreeMap;import com.onestopsolutions.master.bean.Book;import com.onestopsolutions.master.bean.BookType;import com.onestopsolutions.master.bean.GrossIncome;import com.onestopsolutions.master.bean.LoginRequest;import com.onestopsolutions.master.bean.LoginResponse;import com.onestopsolutions.master.bean.NetIncome;import com.onestopsolutions.master.bean.Order;import com.onestopsolutions.master.bean.Subject;import com.onestopsolutions.master.bean.Tax;import com.onestopsolutions.master.bean.User;import com.onestopsolutions.master.frameworks.appsession.AppBaseApplication;import com.onestopsolutions.master.frameworks.dbhandler.PrefManager;import java.io.File;import java.util.List;import java.util.Map;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.RequestBody;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Call;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class WebServicesWrapper {    //private final static String BASE_URL = "https://vilger.pier31.co/";    //private final static String BASE_URL = "http://www.webdesigner3.com/schoolbustracking/apis/";    private final static String BASE_URL = "http://122.160.30.50:3000/";    private static WebServicesWrapper wrapper;    protected WebServices webServices;    private Gson gson;    private PrefManager mPrefManager;    private WebServicesWrapper(String baseUrl) {        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(interceptor).build();        webServices = new Retrofit.Builder()                .addConverterFactory(new RetrofitConverter())                .addConverterFactory(GsonConverterFactory.create())                .baseUrl(baseUrl)                .client(client)                .build().create(WebServices.class);        gson = new Gson();        mPrefManager = PrefManager.getInstance(AppBaseApplication.getApplication());    }    public static WebServicesWrapper getInstance() {        if (wrapper == null)            wrapper = new WebServicesWrapper(BASE_URL);        return wrapper;    }    private Map<String, String> getPartMap(Object object) {        return (LinkedTreeMap) gson.fromJson(gson.toJson(object), Object.class);    }    private MultipartBody.Part getPart(String name, File file) {        if (file == null || name == null)            return null;        RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);        MultipartBody.Part body = MultipartBody.Part.createFormData(name, file.getName(), requestFile);        return body;    }    public Call<LoginResponse> login(LoginRequest loginRequest, ResponseResolver<LoginResponse> replyListCallee) {        Call<LoginResponse> loginResponseCall = webServices.login(loginRequest);        loginResponseCall.enqueue(replyListCallee);        return loginResponseCall;    }    public Call<List<GrossIncome>> getGrossIncome(ResponseResolver<List<GrossIncome>> replyListCallee) {        Call<List<GrossIncome>> responseCall = webServices.getGrossIncome(AppBaseApplication.getApplication().getSession().getToken(), mPrefManager.getStartDate(), mPrefManager.getEndDate(), mPrefManager.getDuration(), mPrefManager.getBookType(), mPrefManager.getBookName());        responseCall.enqueue(replyListCallee);        return responseCall;    }    public Call<List<NetIncome>> getNetIncome(ResponseResolver<List<NetIncome>> replyListCallee) {        Call<List<NetIncome>> responseCall = webServices.getNetIncome(AppBaseApplication.getApplication().getSession().getToken(), mPrefManager.getStartDate(), mPrefManager.getEndDate(), mPrefManager.getDuration(), mPrefManager.getBookType(), mPrefManager.getBookName());        responseCall.enqueue(replyListCallee);        return responseCall;    }    public Call<List<Tax>> getTax(ResponseResolver<List<Tax>> replyListCallee) {        Call<List<Tax>> responseCall = webServices.getTax(AppBaseApplication.getApplication().getSession().getToken(), mPrefManager.getStartDate(), mPrefManager.getEndDate(), mPrefManager.getDuration(), mPrefManager.getBookType(), mPrefManager.getBookName());        responseCall.enqueue(replyListCallee);        return responseCall;    }    public Call<List<User>> getUserList(ResponseResolver<List<User>> replyListCallee) {        Call<List<User>> responseCall = webServices.getUsers(AppBaseApplication.getApplication().getSession().getToken(), mPrefManager.getStartDate(), mPrefManager.getEndDate(), mPrefManager.getDuration(), mPrefManager.getBookType(), mPrefManager.getBookName());        responseCall.enqueue(replyListCallee);        return responseCall;    }    public Call<List<Order>> getOrdersForUser(String userID, ResponseResolver<List<Order>> replyListCallee) {        Call<List<Order>> responseCall = webServices.getOrdersForUser(AppBaseApplication.getApplication().getSession().getToken(), mPrefManager.getStartDate(), mPrefManager.getEndDate(), mPrefManager.getDuration(), mPrefManager.getBookType(), mPrefManager.getBookName(), userID);        responseCall.enqueue(replyListCallee);        return responseCall;    }    public Call<List<Subject>> getSubjectList(ResponseResolver<List<Subject>> replyListCallee) {        Call<List<Subject>> responseCall = webServices.getSubjectList(AppBaseApplication.getApplication().getSession().getToken());        responseCall.enqueue(replyListCallee);        return responseCall;    }    public Call<List<Book>> getBooksForSubject(ResponseResolver<List<Book>> replyListCallee, String subject) {        Call<List<Book>> responseCall = webServices.getBooksForSubject(AppBaseApplication.getApplication().getSession().getToken(), subject);        responseCall.enqueue(replyListCallee);        return responseCall;    }    public Call<List<BookType>> getBookTypes(ResponseResolver<List<BookType>> replyListCallee) {        Call<List<BookType>> responseCall = webServices.getBookTypes(AppBaseApplication.getApplication().getSession().getToken());        responseCall.enqueue(replyListCallee);        return responseCall;    }}